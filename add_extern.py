import re


def split_glob_seg(c_txt: str):
    idx = c_txt.find("/* --- GLOBAL VARIABLES --- */")
    seg1 = c_txt[:idx]
    seg2 = c_txt[idx:]
    idx = seg2.find("/* --- FORWARD DECLARATIONS --- */")
    glob_seg = seg2[:idx]
    seg2 = seg2[idx:]

    return seg1, glob_seg, seg2


def add_extern_specifier(c_path: str, new_c_path: str, glob_name_list: list):
    """ This function only works for C source code generated by CSmith """
    with open(c_path, 'r') as f:
        c_txt = f.read()
        seg1, glob_seg, seg2 = split_glob_seg(c_txt)
        new_glob_seg = ''

        glob_lines = glob_seg.split('\n')
        for g_l in glob_lines:
            old_g_l = g_l

            if '=' in g_l:
                g_l = g_l[:g_l.find('=')]
            for target_glob_name in glob_name_list:
                regexp_str = r"[\w_\s*]+{}".format(target_glob_name)
                if mat := re.match(regexp_str, g_l):
                    target = mat.group()
                    if 'static' in target:
                        new_target = target.replace('static', 'extern')
                    else:
                        new_target = 'extern ' + target

                    old_g_l = old_g_l.replace(target, new_target)
                    break

            new_glob_seg += old_g_l + '\n'

        new_c_txt = seg1 + new_glob_seg + seg2
        with open(new_c_path, 'w') as of:
            of.write(new_c_txt)


def main():
    pass


if __name__ == '__main__':
    main()